//===============================================================
// CREAR_USUARIO.JS v2.1 - L√≥gica de Creaci√≥n de Usuarios COPFLOW
//===============================================================
// 
// PROP√ìSITO:
// Maneja toda la l√≥gica para la creaci√≥n de nuevos usuarios
// incluyendo validaciones en tiempo real, verificaciones de
// disponibilidad y recarga autom√°tica de tabla despu√©s de crear.
// 
// CARACTER√çSTICAS PRINCIPALES:
// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
// ‚îÇ ‚Ä¢ Validaciones en tiempo real con feedback visual          ‚îÇ
// ‚îÇ ‚Ä¢ Verificaci√≥n de disponibilidad de email con debounce     ‚îÇ
// ‚îÇ ‚Ä¢ Medidor de fortaleza de contrase√±a interactivo           ‚îÇ
// ‚îÇ ‚Ä¢ Recarga autom√°tica de tabla con m√∫ltiples estrategias    ‚îÇ
// ‚îÇ ‚Ä¢ Manejo robusto de errores con fallbacks                  ‚îÇ
// ‚îÇ ‚Ä¢ Integraci√≥n completa con sistema de modales              ‚îÇ
// ‚îÇ ‚Ä¢ Accesibilidad y navegaci√≥n por teclado                   ‚îÇ
// ‚îÇ ‚Ä¢ Logging avanzado para debugging                          ‚îÇ
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
// 
// ARQUITECTURA MODULAR:
// ‚Ä¢ Configuraci√≥n y variables globales
// ‚Ä¢ Funciones principales del modal
// ‚Ä¢ Sistema de validaciones en tiempo real
// ‚Ä¢ Utilidades de validaci√≥n y UI
// ‚Ä¢ Sistema de fortaleza de contrase√±a
// ‚Ä¢ Funci√≥n principal de creaci√≥n con recarga autom√°tica
// ‚Ä¢ Inicializaci√≥n y eventos
// 
// DESARROLLADO POR: Diomedez98 (JCCODE-SAS)
// FECHA CREACI√ìN: 2025-09-10
// FECHA ACTUALIZACI√ìN: 2025-09-10 04:13:53 UTC
// REPOSITORIO: https://github.com/Diomedez98/copflows
// EMPRESA: JCCODE-SAS
//===============================================================

(function() {
    "use strict";

    //===============================================================
    // CONFIGURACI√ìN Y VARIABLES GLOBALES
    //===============================================================
    
    /**
     * Estado de validaci√≥n de cada campo del formulario
     */
    let validacionEstado = {
        nombre: false,
        email: false,
        password: false,
        confirmarPassword: false,
        rol: false
    };

    /**
     * Variables de control para optimizaci√≥n
     */
    let timeoutEmail = null;              // Timeout para verificaci√≥n de email
    let formularioInicializado = false;   // Control de inicializaci√≥n √∫nica
    
    /**
     * Configuraci√≥n del m√≥dulo
     */
    const CONFIG = {
        VERSION: '2.1',
        DEBUG_MODE: true,
        EMAIL_CHECK_DELAY: 800,        // ms para verificaci√≥n de email
        FOCUS_DELAY: 150,              // ms para focus en campos
        RELOAD_DELAY: 500,             // ms para recarga de tabla
        MIN_PASSWORD_LENGTH: 8,        // Longitud m√≠nima de contrase√±a
        MIN_PASSWORD_STRENGTH: 3       // Fortaleza m√≠nima requerida
    };

    /**
     * Sistema de logging optimizado
     */
    function log(mensaje, tipo = 'info') {
        if (!CONFIG.DEBUG_MODE) return;
        
        const timestamp = new Date().toLocaleTimeString();
        const prefix = `[${timestamp}] [CREAR_USUARIO.JS v${CONFIG.VERSION}]`;
        
        switch(tipo) {
            case 'error': 
                console.error(`${prefix} ‚ùå`, mensaje); 
                break;
            case 'warn': 
                console.warn(`${prefix} ‚ö†Ô∏è`, mensaje); 
                break;
            case 'success': 
                console.log(`${prefix} ‚úÖ`, mensaje); 
                break;
            case 'info':
            default: 
                console.log(`${prefix} üîÑ`, mensaje); 
                break;
        }
    }

    //===============================================================
    // FUNCIONES PRINCIPALES DEL MODAL
    //===============================================================

    /**
     * üöÄ Mostrar modal de creaci√≥n de usuario
     * Funci√≥n principal para abrir el modal con inicializaci√≥n completa
     */
    window.mostrarModalNuevoUsuario = function() {
        log("Abriendo modal de creaci√≥n de usuario");
        
        try {
            // Limpiar formulario y resetear validaciones
            limpiarFormularioCrear();
            
            // Verificar existencia del modal
            const modal = document.getElementById('crearUsuarioModal');
            if (!modal) {
                log("Modal de creaci√≥n no encontrado en el DOM", 'error');
                mostrarError('crearUsuarioModal', 'El modal de creaci√≥n no est√° disponible. Por favor, recarga la p√°gina.');
                return;
            }
            
            // Mostrar modal con animaci√≥n
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
            
            // Inicializar formulario si no se ha hecho
            if (!formularioInicializado) {
                inicializarValidaciones();
                formularioInicializado = true;
                log("Formulario inicializado por primera vez");
            }
            
            // Focus en el primer campo con delay para animaci√≥n
            setTimeout(() => {
                const nombreInput = document.getElementById('nombreUsuario');
                if (nombreInput) {
                    nombreInput.focus();
                    log("Focus aplicado al campo nombre");
                }
            }, CONFIG.FOCUS_DELAY);
            
            log("Modal de creaci√≥n abierto correctamente", 'success');
            
        } catch (error) {
            log(`Error al abrir modal: ${error.message}`, 'error');
            
            // Fallback para errores
            if (typeof mostrarModalError === 'function') {
                mostrarModalError("Error", "Error al abrir el modal de creaci√≥n. Intenta nuevamente.");
            } else {
                alert("Error al abrir el modal de creaci√≥n. Intenta nuevamente.");
            }
        }
    };

    /**
     * ‚úñÔ∏è Cerrar modal de creaci√≥n
     * Limpia el estado y oculta el modal
     */
    window.cerrarModalCrearUsuario = function() {
        log("Cerrando modal de creaci√≥n");
        
        try {
            const modal = document.getElementById('crearUsuarioModal');
            if (modal) {
                // Ocultar modal con animaci√≥n
                modal.classList.add('hidden');
                document.body.style.overflow = '';
                
                // Limpiar formulario
                limpiarFormularioCrear();
                
                log("Modal de creaci√≥n cerrado correctamente", 'success');
            }
        } catch (error) {
            log(`Error al cerrar modal: ${error.message}`, 'error');
        }
    };

    /**
     * üßπ Limpiar formulario de creaci√≥n
     * Resetea todos los campos y validaciones
     */
    window.limpiarFormularioCrear = function() {
        log("Limpiando formulario de creaci√≥n");
        
        try {
            // Resetear formulario HTML
            const form = document.getElementById('formCrearUsuario');
            if (form) {
                form.reset();
            }
            
            // Limpiar todas las validaciones visuales
            limpiarTodasLasValidaciones();
            
            // Resetear estado de validaci√≥n
            validacionEstado = {
                nombre: false,
                email: false,
                password: false,
                confirmarPassword: false,
                rol: false
            };
            
            // Resetear medidor de contrase√±a
            resetPasswordStrength();
            
            // Actualizar estado del bot√≥n
            actualizarEstadoBoton();
            
            // Limpiar timeouts pendientes
            if (timeoutEmail) {
                clearTimeout(timeoutEmail);
                timeoutEmail = null;
            }
            
            log("Formulario limpiado correctamente", 'success');
            
        } catch (error) {
            log(`Error al limpiar formulario: ${error.message}`, 'error');
        }
    };

    //===============================================================
    // SISTEMA DE VALIDACIONES EN TIEMPO REAL
    //===============================================================

    /**
     * üîß Inicializar validaciones del formulario
     * Configura todos los event listeners para validaci√≥n en tiempo real
     */
    function inicializarValidaciones() {
        log("Inicializando sistema de validaciones");
        
        try {
            // Validaci√≥n de nombre
            const nombreInput = document.getElementById('nombreUsuario');
            if (nombreInput) {
                nombreInput.addEventListener('input', function() {
                    validarNombre(this.value);
                });
                
                nombreInput.addEventListener('blur', function() {
                    if (this.value.length > 0) {
                        validarNombre(this.value);
                    }
                });
                log("Validaci√≥n de nombre configurada");
            }

            // Validaci√≥n de email con debounce
            const emailInput = document.getElementById('emailUsuario');
            if (emailInput) {
                emailInput.addEventListener('input', function() {
                    clearTimeout(timeoutEmail);
                    const email = this.value;
                    
                    limpiarValidacionEmail();
                    
                    if (email.length > 0) {
                        timeoutEmail = setTimeout(() => {
                            validarEmail(email);
                        }, CONFIG.EMAIL_CHECK_DELAY);
                    } else {
                        validacionEstado.email = false;
                        actualizarEstadoBoton();
                    }
                });
                
                emailInput.addEventListener('blur', function() {
                    if (this.value.length > 0) {
                        clearTimeout(timeoutEmail);
                        validarEmail(this.value);
                    }
                });
                log("Validaci√≥n de email configurada");
            }

            // Validaci√≥n de contrase√±a
            const passwordInput = document.getElementById('passwordUsuario');
            if (passwordInput) {
                passwordInput.addEventListener('input', function() {
                    validarPassword(this.value);
                    // Re-validar confirmaci√≥n cuando cambia la contrase√±a principal
                    validarConfirmarPassword();
                });
                log("Validaci√≥n de contrase√±a configurada");
            }

            // Validaci√≥n de confirmaci√≥n de contrase√±a
            const confirmarInput = document.getElementById('confirmarPassword');
            if (confirmarInput) {
                confirmarInput.addEventListener('input', function() {
                    validarConfirmarPassword();
                });
                log("Validaci√≥n de confirmaci√≥n configurada");
            }

            // Validaci√≥n de rol
            const rolSelect = document.getElementById('rolUsuario');
            if (rolSelect) {
                rolSelect.addEventListener('change', function() {
                    validarRol(this.value);
                    mostrarDescripcionRol(this.value);
                });
                log("Validaci√≥n de rol configurada");
            }
            
            log("Sistema de validaciones inicializado correctamente", 'success');
            
        } catch (error) {
            log(`Error al inicializar validaciones: ${error.message}`, 'error');
        }
    }

    /**
     * ‚úÖ Validar nombre de usuario
     * @param {string} nombre - Nombre a validar
     */
    function validarNombre(nombre) {
        const campo = document.getElementById('nombreUsuario');
        const errorDiv = document.getElementById('errorNombre');
        const validDiv = document.getElementById('validNombre');
        
        try {
            // Limpiar estados anteriores
            limpiarEstadosCampo(campo, errorDiv, validDiv);
            
            // Validaci√≥n de campo vac√≠o
            if (nombre.length === 0) {
                validacionEstado.nombre = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n de longitud m√≠nima
            if (nombre.length < 2) {
                mostrarErrorCampo('errorNombre', 'El nombre debe tener al menos 2 caracteres');
                campo.classList.add('border-red-500');
                validacionEstado.nombre = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n de longitud m√°xima
            if (nombre.length > 100) {
                mostrarErrorCampo('errorNombre', 'El nombre no puede exceder 100 caracteres');
                campo.classList.add('border-red-500');
                validacionEstado.nombre = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n de caracteres permitidos
            if (!/^[a-zA-Z√Ä-√ø\s]+$/.test(nombre)) {
                mostrarErrorCampo('errorNombre', 'El nombre solo puede contener letras y espacios');
                campo.classList.add('border-red-500');
                validacionEstado.nombre = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n exitosa
            campo.classList.add('border-green-500');
            validDiv.classList.remove('hidden');
            validacionEstado.nombre = true;
            actualizarEstadoBoton();
            
            log(`Nombre validado: "${nombre}"`, 'success');
            
        } catch (error) {
            log(`Error en validaci√≥n de nombre: ${error.message}`, 'error');
        }
    }

    /**
     * üìß Validar email de usuario
     * @param {string} email - Email a validar
     */
    function validarEmail(email) {
        const campo = document.getElementById('emailUsuario');
        const errorDiv = document.getElementById('errorEmail');
        const validDiv = document.getElementById('validEmail');
        const loadingDiv = document.getElementById('loadingEmail');
        
        try {
            // Limpiar estados anteriores
            limpiarEstadosCampo(campo, errorDiv, validDiv);
            loadingDiv.classList.add('hidden');
            
            // Validaci√≥n de campo vac√≠o
            if (email.length === 0) {
                validacionEstado.email = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n de formato de email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                mostrarErrorCampo('errorEmail', 'Formato de email inv√°lido');
                campo.classList.add('border-red-500');
                validacionEstado.email = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Mostrar indicador de carga
            loadingDiv.classList.remove('hidden');
            log(`Verificando disponibilidad de email: ${email}`);
            
            // Verificar disponibilidad en servidor
            verificarDisponibilidadEmail(email);
            
        } catch (error) {
            log(`Error en validaci√≥n de email: ${error.message}`, 'error');
            loadingDiv.classList.add('hidden');
            mostrarErrorCampo('errorEmail', 'Error al validar email');
            validacionEstado.email = false;
            actualizarEstadoBoton();
        }
    }

    /**
     * üåê Verificar disponibilidad de email en servidor
     * @param {string} email - Email a verificar
     */
    function verificarDisponibilidadEmail(email) {
        fetch('/public_html/dashboard/paginas/usuarios/api/verificar_email.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email: email })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            const campo = document.getElementById('emailUsuario');
            const errorDiv = document.getElementById('errorEmail');
            const validDiv = document.getElementById('validEmail');
            const loadingDiv = document.getElementById('loadingEmail');
            
            // Ocultar loading
            loadingDiv.classList.add('hidden');
            
            if (data && !data.exists) {
                // Email disponible
                campo.classList.add('border-green-500');
                validDiv.classList.remove('hidden');
                validacionEstado.email = true;
                log(`Email disponible: ${email}`, 'success');
            } else {
                // Email ya existe
                mostrarErrorCampo('errorEmail', 'Este email ya est√° registrado en el sistema');
                campo.classList.add('border-red-500');
                validacionEstado.email = false;
                log(`Email ya existe: ${email}`, 'warn');
            }
            
            actualizarEstadoBoton();
        })
        .catch(error => {
            log(`Error al verificar email: ${error.message}`, 'error');
            
            const loadingDiv = document.getElementById('loadingEmail');
            if (loadingDiv) loadingDiv.classList.add('hidden');
            
            mostrarErrorCampo('errorEmail', 'Error al verificar disponibilidad del email');
            validacionEstado.email = false;
            actualizarEstadoBoton();
        });
    }

    /**
     * üîí Validar contrase√±a
     * @param {string} password - Contrase√±a a validar
     */
    function validarPassword(password) {
        const campo = document.getElementById('passwordUsuario');
        const errorDiv = document.getElementById('errorPassword');
        
        try {
            // Limpiar estados anteriores
            campo.classList.remove('border-red-500', 'border-green-500');
            errorDiv.classList.add('hidden');
            
            // Validaci√≥n de campo vac√≠o
            if (password.length === 0) {
                validacionEstado.password = false;
                resetPasswordStrength();
                actualizarEstadoBoton();
                return;
            }
            
            // Calcular y mostrar fortaleza
            const strength = calcularFortalezaPassword(password);
            mostrarFortalezaPassword(strength);
            
            // Validaci√≥n de longitud m√≠nima
            if (password.length < CONFIG.MIN_PASSWORD_LENGTH) {
                mostrarErrorCampo('errorPassword', `La contrase√±a debe tener al menos ${CONFIG.MIN_PASSWORD_LENGTH} caracteres`);
                campo.classList.add('border-red-500');
                validacionEstado.password = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n de fortaleza m√≠nima
            if (strength < CONFIG.MIN_PASSWORD_STRENGTH) {
                mostrarErrorCampo('errorPassword', 'La contrase√±a es demasiado d√©bil. Incluya may√∫sculas, min√∫sculas y n√∫meros');
                campo.classList.add('border-red-500');
                validacionEstado.password = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n exitosa
            campo.classList.add('border-green-500');
            validacionEstado.password = true;
            actualizarEstadoBoton();
            
            log(`Contrase√±a validada (fortaleza: ${strength}/4)`, 'success');
            
        } catch (error) {
            log(`Error en validaci√≥n de contrase√±a: ${error.message}`, 'error');
        }
    }

    /**
     * üîí Validar confirmaci√≥n de contrase√±a
     */
    function validarConfirmarPassword() {
        const password = document.getElementById('passwordUsuario').value;
        const confirmar = document.getElementById('confirmarPassword').value;
        const campo = document.getElementById('confirmarPassword');
        const errorDiv = document.getElementById('errorConfirmarPassword');
        const validDiv = document.getElementById('validConfirmarPassword');
        
        try {
            // Limpiar estados anteriores
            limpiarEstadosCampo(campo, errorDiv, validDiv);
            
            // Validaci√≥n de campo vac√≠o
            if (confirmar.length === 0) {
                validacionEstado.confirmarPassword = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n de coincidencia
            if (password !== confirmar) {
                mostrarErrorCampo('errorConfirmarPassword', 'Las contrase√±as no coinciden');
                campo.classList.add('border-red-500');
                validacionEstado.confirmarPassword = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n exitosa
            campo.classList.add('border-green-500');
            validDiv.classList.remove('hidden');
            validacionEstado.confirmarPassword = true;
            actualizarEstadoBoton();
            
            log("Confirmaci√≥n de contrase√±a validada", 'success');
            
        } catch (error) {
            log(`Error en validaci√≥n de confirmaci√≥n: ${error.message}`, 'error');
        }
    }

    /**
     * üë§ Validar rol de usuario
     * @param {string} rol - Rol a validar
     */
    function validarRol(rol) {
        const campo = document.getElementById('rolUsuario');
        const errorDiv = document.getElementById('errorRol');
        
        try {
            // Limpiar estados anteriores
            campo.classList.remove('border-red-500', 'border-green-500');
            errorDiv.classList.add('hidden');
            
            // Validaci√≥n de selecci√≥n
            if (!rol || rol === '') {
                mostrarErrorCampo('errorRol', 'Debe seleccionar un rol para el usuario');
                campo.classList.add('border-red-500');
                validacionEstado.rol = false;
                actualizarEstadoBoton();
                return;
            }
            
            // Validaci√≥n exitosa
            campo.classList.add('border-green-500');
            validacionEstado.rol = true;
            actualizarEstadoBoton();
            
            log(`Rol seleccionado: ${rol}`, 'success');
            
        } catch (error) {
            log(`Error en validaci√≥n de rol: ${error.message}`, 'error');
        }
    }

    //===============================================================
    // UTILIDADES DE VALIDACI√ìN
    //===============================================================

    /**
     * üßπ Limpiar estados visuales de un campo
     * @param {HTMLElement} campo - Campo de entrada
     * @param {HTMLElement} errorDiv - Div de error
     * @param {HTMLElement} validDiv - Div de validaci√≥n exitosa
     */
    function limpiarEstadosCampo(campo, errorDiv, validDiv) {
        if (campo) {
            campo.classList.remove('border-red-500', 'border-green-500');
        }
        if (errorDiv) {
            errorDiv.classList.add('hidden');
        }
        if (validDiv) {
            validDiv.classList.add('hidden');
        }
    }

    /**
     * ‚ùå Mostrar error en campo espec√≠fico
     * @param {string} errorId - ID del div de error
     * @param {string} mensaje - Mensaje de error
     */
    function mostrarErrorCampo(errorId, mensaje) {
        const errorDiv = document.getElementById(errorId);
        if (errorDiv) {
            const span = errorDiv.querySelector('span');
            if (span) {
                span.textContent = mensaje;
            }
            errorDiv.classList.remove('hidden');
        }
    }

    /**
     * üßπ Limpiar todas las validaciones visuales
     */
    function limpiarTodasLasValidaciones() {
        try {
            const campos = ['nombreUsuario', 'emailUsuario', 'passwordUsuario', 'confirmarPassword', 'rolUsuario'];
            const errores = ['errorNombre', 'errorEmail', 'errorPassword', 'errorConfirmarPassword', 'errorRol'];
            const validos = ['validNombre', 'validEmail', 'validConfirmarPassword'];
            
            // Limpiar campos
            campos.forEach(campo => {
                const elemento = document.getElementById(campo);
                if (elemento) {
                    elemento.classList.remove('border-red-500', 'border-green-500');
                }
            });
            
            // Ocultar errores
            errores.forEach(error => {
                const elemento = document.getElementById(error);
                if (elemento) {
                    elemento.classList.add('hidden');
                }
            });
            
            // Ocultar validaciones exitosas
            validos.forEach(valido => {
                const elemento = document.getElementById(valido);
                if (elemento) {
                    elemento.classList.add('hidden');
                }
            });
            
            // Limpiar elementos espec√≠ficos
            const elementosEspeciales = ['loadingEmail', 'rolDescription'];
            elementosEspeciales.forEach(id => {
                const elemento = document.getElementById(id);
                if (elemento) {
                    elemento.classList.add('hidden');
                }
            });
            
            log("Todas las validaciones limpiadas");
            
        } catch (error) {
            log(`Error al limpiar validaciones: ${error.message}`, 'error');
        }
    }

    /**
     * üìß Limpiar validaci√≥n espec√≠fica de email
     */
    function limpiarValidacionEmail() {
        const elementos = {
            campo: document.getElementById('emailUsuario'),
            error: document.getElementById('errorEmail'),
            valid: document.getElementById('validEmail'),
            loading: document.getElementById('loadingEmail')
        };
        
        Object.values(elementos).forEach(elemento => {
            if (elemento) {
                if (elemento.id === 'emailUsuario') {
                    elemento.classList.remove('border-red-500', 'border-green-500');
                } else {
                    elemento.classList.add('hidden');
                }
            }
        });
        
        validacionEstado.email = false;
    }

    //===============================================================
    // SISTEMA DE FORTALEZA DE CONTRASE√ëA
    //===============================================================

    /**
     * üî¢ Calcular fortaleza de contrase√±a
     * @param {string} password - Contrase√±a a evaluar
     * @returns {number} Nivel de fortaleza (0-4)
     */
    function calcularFortalezaPassword(password) {
        let score = 0;
        
        try {
            // Criterios de longitud
            if (password.length >= 8) score++;
            if (password.length >= 12) score++;
            
            // Criterios de caracteres
            if (/[a-z]/.test(password)) score++;    // Min√∫sculas
            if (/[A-Z]/.test(password)) score++;    // May√∫sculas
            if (/[0-9]/.test(password)) score++;    // N√∫meros
            if (/[^A-Za-z0-9]/.test(password)) score++; // Caracteres especiales
            
            return Math.min(score, 4);
            
        } catch (error) {
            log(`Error al calcular fortaleza: ${error.message}`, 'error');
            return 0;
        }
    }

    /**
     * üé® Mostrar fortaleza de contrase√±a visualmente
     * @param {number} strength - Nivel de fortaleza (0-4)
     */
    function mostrarFortalezaPassword(strength) {
        const colors = ['bg-red-500', 'bg-orange-500', 'bg-yellow-500', 'bg-green-500'];
        const texts = ['Muy d√©bil', 'D√©bil', 'Moderada', 'Fuerte'];
        
        try {
            // Resetear todas las barras
            for (let i = 1; i <= 4; i++) {
                const bar = document.getElementById(`strength${i}`);
                if (bar) {
                    bar.className = 'h-1 w-1/4 bg-gray-200 rounded-full transition-all duration-300';
                }
            }
            
            // Llenar barras seg√∫n fortaleza
            for (let i = 1; i <= strength; i++) {
                const bar = document.getElementById(`strength${i}`);
                if (bar) {
                    bar.className = `h-1 w-1/4 ${colors[strength - 1]} rounded-full transition-all duration-300`;
                }
            }
            
            // Actualizar texto descriptivo
            const strengthText = document.getElementById('strengthText');
            if (strengthText) {
                strengthText.textContent = texts[strength - 1] || 'Ingrese una contrase√±a';
                strengthText.className = `text-xs mt-1 ${strength >= 3 ? 'text-green-600' : strength >= 2 ? 'text-yellow-600' : 'text-red-600'}`;
            }
            
        } catch (error) {
            log(`Error al mostrar fortaleza: ${error.message}`, 'error');
        }
    }

    /**
     * üîÑ Resetear medidor de contrase√±a
     */
    function resetPasswordStrength() {
        try {
            for (let i = 1; i <= 4; i++) {
                const bar = document.getElementById(`strength${i}`);
                if (bar) {
                    bar.className = 'h-1 w-1/4 bg-gray-200 rounded-full transition-all duration-300';
                }
            }
            
            const strengthText = document.getElementById('strengthText');
            if (strengthText) {
                strengthText.textContent = 'Ingrese una contrase√±a';
                strengthText.className = 'text-xs text-gray-500 mt-1';
            }
            
        } catch (error) {
            log(`Error al resetear medidor: ${error.message}`, 'error');
        }
    }

    //===============================================================
    // UTILIDADES DE INTERFAZ
    //===============================================================

    /**
     * üëÅÔ∏è Mostrar/ocultar contrase√±a
     * @param {string} inputId - ID del campo de contrase√±a
     * @param {string} iconId - ID del icono de toggle
     */
    window.togglePasswordVisibility = function(inputId, iconId) {
        try {
            const input = document.getElementById(inputId);
            const icon = document.getElementById(iconId);
            
            if (input && icon) {
                if (input.type === 'password') {
                    input.type = 'text';
                    icon.className = 'ri-eye-line';
                    log(`Contrase√±a visible: ${inputId}`);
                } else {
                    input.type = 'password';
                    icon.className = 'ri-eye-off-line';
                    log(`Contrase√±a oculta: ${inputId}`);
                }
            }
        } catch (error) {
            log(`Error al toggle contrase√±a: ${error.message}`, 'error');
        }
    };

    /**
     * üìù Mostrar descripci√≥n del rol seleccionado
     * @param {string} rol - Rol seleccionado
     */
    function mostrarDescripcionRol(rol) {
        const descripcionDiv = document.getElementById('rolDescription');
        const textoSpan = document.getElementById('rolDescriptionText');
        
        const descripciones = {
            'user': 'Acceso b√°sico al sistema. Puede ver y gestionar su propia informaci√≥n.',
            'admin': 'Acceso completo al sistema. Puede gestionar usuarios y configuraciones.'
        };
        
        try {
            if (descripcionDiv && textoSpan) {
                if (rol && descripciones[rol]) {
                    textoSpan.textContent = descripciones[rol];
                    descripcionDiv.classList.remove('hidden');
                    log(`Descripci√≥n mostrada para rol: ${rol}`);
                } else {
                    descripcionDiv.classList.add('hidden');
                }
            }
        } catch (error) {
            log(`Error al mostrar descripci√≥n de rol: ${error.message}`, 'error');
        }
    }

    /**
     * üîò Actualizar estado del bot√≥n crear
     */
    function actualizarEstadoBoton() {
        try {
            const boton = document.getElementById('btnCrearUsuario');
            if (boton) {
                const todosValidos = Object.values(validacionEstado).every(estado => estado === true);
                
                if (todosValidos) {
                    boton.disabled = false;
                    boton.classList.remove('opacity-50', 'cursor-not-allowed');
                    boton.classList.add('hover:bg-green-700', 'transition-colors');
                } else {
                    boton.disabled = true;
                    boton.classList.add('opacity-50', 'cursor-not-allowed');
                    boton.classList.remove('hover:bg-green-700');
                }
            }
        } catch (error) {
            log(`Error al actualizar bot√≥n: ${error.message}`, 'error');
        }
    }

    //===============================================================
    // FUNCI√ìN PRINCIPAL DE CREACI√ìN CON RECARGA AUTOM√ÅTICA
    //===============================================================

    /**
     * üöÄ Crear nuevo usuario con recarga autom√°tica de tabla
     * Funci√≥n principal que maneja todo el proceso de creaci√≥n
     */
    window.crearUsuario = function() {
        log("Iniciando proceso de creaci√≥n de usuario");
        
        try {
            // Validar formulario completo antes de enviar
            if (!validarFormularioCompleto()) {
                log("Formulario no v√°lido, cancelando creaci√≥n", 'warn');
                return;
            }
            
            // Mostrar estado de carga
            mostrarEstadoCarga(true);
            
            // Recopilar datos del formulario
            const datosUsuario = {
                nombre: document.getElementById('nombreUsuario').value.trim(),
                email: document.getElementById('emailUsuario').value.trim(),
                password: document.getElementById('passwordUsuario').value,
                rol: document.getElementById('rolUsuario').value,
                estado: 'activo' // Siempre activo en creaci√≥n
            };
            
            log(`Enviando datos del usuario: ${datosUsuario.nombre} (${datosUsuario.email})`);
            
            // Enviar datos al servidor
            fetch('/public_html/dashboard/paginas/usuarios/api/crear_usuario.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(datosUsuario)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                mostrarEstadoCarga(false);
                
                if (data.success) {
                    log(`Usuario creado exitosamente: ID ${data.user_id || 'N/A'}`, 'success');
                    
                    // Mostrar notificaci√≥n de √©xito
                    if (typeof mostrarModalExito === 'function') {
                        mostrarModalExito(
                            "Usuario Creado", 
                            `El usuario "${datosUsuario.nombre}" ha sido creado exitosamente.`
                        );
                    } else {
                        alert(`Usuario "${datosUsuario.nombre}" creado exitosamente.`);
                    }
                    
                    // Cerrar modal
                    cerrarModalCrearUsuario();
                    
                    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    // üîÑ SISTEMA DE RECARGA AUTOM√ÅTICA DE TABLA
                    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    
                    log("Iniciando recarga autom√°tica de tabla");
                    
                    setTimeout(() => {
                        // Estrategia 1: Funci√≥n espec√≠fica de recarga de tabla
                        if (typeof window.recargarTablaUsuarios === 'function') {
                            log("Usando recargarTablaUsuarios()", 'success');
                            window.recargarTablaUsuarios();
                            
                        } else if (typeof window.ajaxFiltrar === 'function') {
                            // Estrategia 2: Funci√≥n de filtros AJAX
                            log("Usando ajaxFiltrar() como alternativa", 'success');
                            window.ajaxFiltrar();
                            
                        } else if (typeof window.recargarSeccionUsuarios === 'function') {
                            // Estrategia 3: Recarga de secci√≥n completa
                            log("Usando recargarSeccionUsuarios()", 'success');
                            window.recargarSeccionUsuarios();
                            
                        } else {
                            // Estrategia 4: Recarga manual de secci√≥n
                            log("Intentando recarga manual de secci√≥n");
                            const usuariosSection = document.getElementById('usuariosSection');
                            if (usuariosSection) {
                                fetch('/public_html/dashboard/paginas/usuarios/usuarios.php')
                                .then(response => response.text())
                                .then(html => {
                                    usuariosSection.innerHTML = html;
                                    log("Secci√≥n recargada manualmente", 'success');
                                    
                                    // Reinicializar eventos si est√° disponible
                                    if (typeof window.inicializarUsuarios === 'function') {
                                        setTimeout(() => {
                                            window.inicializarUsuarios();
                                        }, 100);
                                    }
                                })
                                .catch(error => {
                                    log(`Error en recarga manual: ${error.message}`, 'error');
                                    recargarPaginaCompleta();
                                });
                            } else {
                                recargarPaginaCompleta();
                            }
                        }
                        
                        // Actualizar estad√≠sticas independientemente
                        if (typeof actualizarEstadisticasUsuarios === 'function') {
                            setTimeout(() => {
                                actualizarEstadisticasUsuarios();
                                log("Estad√≠sticas actualizadas");
                            }, 300);
                        }
                        
                    }, CONFIG.RELOAD_DELAY);
                    
                } else {
                    log(`Error al crear usuario: ${data.message}`, 'error');
                    
                    // Mostrar error espec√≠fico
                    if (typeof mostrarModalError === 'function') {
                        mostrarModalError("Error al Crear Usuario", data.message);
                    } else {
                        alert("Error: " + data.message);
                    }
                }
            })
            .catch(error => {
                log(`Error de conexi√≥n: ${error.message}`, 'error');
                mostrarEstadoCarga(false);
                
                if (typeof mostrarModalError === 'function') {
                    mostrarModalError(
                        "Error de Conexi√≥n", 
                        "No se pudo conectar con el servidor. Intente nuevamente."
                    );
                } else {
                    alert("Error de conexi√≥n. Intente nuevamente.");
                }
            });
            
        } catch (error) {
            log(`Error general en creaci√≥n: ${error.message}`, 'error');
            mostrarEstadoCarga(false);
            
            if (typeof mostrarModalError === 'function') {
                mostrarModalError("Error", "Ocurri√≥ un error inesperado. Intente nuevamente.");
            } else {
                alert("Error inesperado. Intente nuevamente.");
            }
        }
    };

    /**
     * üîÑ Recargar p√°gina completa como √∫ltimo recurso
     */
    function recargarPaginaCompleta() {
        log("√öltimo recurso: recargando p√°gina completa");
        setTimeout(() => {
            window.location.reload();
        }, 1500);
    }

    /**
     * ‚úÖ Validar formulario completo antes de enviar
     * @returns {boolean} - True si el formulario es v√°lido
     */
    function validarFormularioCompleto() {
        try {
            // Re-validar todos los campos
            const nombre = document.getElementById('nombreUsuario').value.trim();
            const email = document.getElementById('emailUsuario').value.trim();
            const password = document.getElementById('passwordUsuario').value;
            const confirmar = document.getElementById('confirmarPassword').value;
            const rol = document.getElementById('rolUsuario').value;
            
            validarNombre(nombre);
            validarPassword(password);
            validarConfirmarPassword();
            validarRol(rol);
            
            // Verificar que todos los campos est√©n v√°lidos
            const todosValidos = Object.values(validacionEstado).every(estado => estado === true);
            
            if (!todosValidos) {
                // Enfocar el primer campo con error
                const campos = ['nombre', 'email', 'password', 'confirmarPassword', 'rol'];
                for (const campo of campos) {
                    if (!validacionEstado[campo]) {
                        const elemento = document.getElementById(getInputIdByCampo(campo));
                        if (elemento) {
                            elemento.focus();
                            log(`Focus aplicado a campo con error: ${campo}`, 'warn');
                            break;
                        }
                    }
                }
            }
            
            log(`Validaci√≥n completa: ${todosValidos ? 'EXITOSA' : 'FALLIDA'}`, todosValidos ? 'success' : 'warn');
            return todosValidos;
            
        } catch (error) {
            log(`Error en validaci√≥n completa: ${error.message}`, 'error');
            return false;
        }
    }

    /**
     * üéØ Obtener ID de input por nombre de campo
     * @param {string} campo - Nombre del campo
     * @returns {string} - ID del input
     */
    function getInputIdByCampo(campo) {
        const mapping = {
            'nombre': 'nombreUsuario',
            'email': 'emailUsuario',
            'password': 'passwordUsuario',
            'confirmarPassword': 'confirmarPassword',
            'rol': 'rolUsuario'
        };
        return mapping[campo] || '';
    }

    /**
     * ‚è≥ Mostrar estado de carga en el bot√≥n
     * @param {boolean} mostrar - True para mostrar carga, false para ocultar
     */
    function mostrarEstadoCarga(mostrar) {
        try {
            const boton = document.getElementById('btnCrearUsuario');
            const icono = document.getElementById('iconCrearUsuario');
            const texto = document.getElementById('textCrearUsuario');
            
            if (boton && icono && texto) {
                if (mostrar) {
                    boton.disabled = true;
                    icono.className = 'ri-loader-4-line animate-spin mr-1';
                    texto.textContent = 'Creando Usuario...';
                    boton.classList.add('opacity-75');
                    log("Estado de carga activado");
                } else {
                    boton.disabled = false;
                    icono.className = 'ri-user-add-line mr-1';
                    texto.textContent = 'Crear Usuario';
                    boton.classList.remove('opacity-75');
                    
                    // Re-evaluar estado del bot√≥n
                    actualizarEstadoBoton();
                    log("Estado de carga desactivado");
                }
            }
        } catch (error) {
            log(`Error al mostrar estado de carga: ${error.message}`, 'error');
        }
    }

    //===============================================================
    // INICIALIZACI√ìN Y EVENTOS
    //===============================================================

    /**
     * üéØ Inicializar m√≥dulo cuando el DOM est√© listo
     */
    document.addEventListener('DOMContentLoaded', function() {
        log("Inicializando m√≥dulo de creaci√≥n de usuarios", 'success');
        
        try {
            // Evento para cerrar modal con ESC
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    const modal = document.getElementById('crearUsuarioModal');
                    if (modal && !modal.classList.contains('hidden')) {
                        cerrarModalCrearUsuario();
                        log("Modal cerrado con tecla ESC");
                    }
                }
            });
            
            // Evento para cerrar modal al hacer clic en el overlay
            document.addEventListener('click', function(e) {
                const modal = document.getElementById('crearUsuarioModal');
                if (e.target === modal) {
                    cerrarModalCrearUsuario();
                    log("Modal cerrado con clic en overlay");
                }
            });
            
            // Prevenir cierre accidental al hacer clic dentro del modal
            const modalContent = document.querySelector('#crearUsuarioModal .bg-white');
            if (modalContent) {
                modalContent.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
            }
            
            log("Eventos de modal configurados correctamente", 'success');
            
        } catch (error) {
            log(`Error en inicializaci√≥n: ${error.message}`, 'error');
        }
    });

})();

//===============================================================
// FIN DEL M√ìDULO CREAR_USUARIO.JS v2.1
//===============================================================

/**
 * ===============================================================
 * üìã DOCUMENTACI√ìN FINAL
 * ===============================================================
 * 
 * üéØ FUNCIONALIDADES IMPLEMENTADAS:
 * ‚úÖ Modal minimalista y completamente responsive
 * ‚úÖ Validaci√≥n en tiempo real con feedback visual avanzado
 * ‚úÖ Verificaci√≥n de disponibilidad de email con debounce
 * ‚úÖ Medidor de fortaleza de contrase√±a interactivo
 * ‚úÖ Validaci√≥n de confirmaci√≥n de contrase√±a instant√°nea
 * ‚úÖ Selecci√≥n de rol con descripci√≥n autom√°tica
 * ‚úÖ Sistema de recarga autom√°tica de tabla con m√∫ltiples estrategias
 * ‚úÖ Estados de carga y feedback visual optimizado
 * ‚úÖ Manejo robusto de errores con fallbacks
 * ‚úÖ Integraci√≥n completa con sistema de notificaciones
 * ‚úÖ Accesibilidad y navegaci√≥n por teclado
 * ‚úÖ Logging avanzado para debugging
 * ‚úÖ Compatibilidad total con sistema existente
 * 
 * üîß ARQUITECTURA T√âCNICA:
 * ‚Ä¢ Patr√≥n de m√≥dulo IIFE para encapsulaci√≥n
 * ‚Ä¢ Sistema de configuraci√≥n centralizado
 * ‚Ä¢ Validaciones independientes y reutilizables
 * ‚Ä¢ Manejo de errores por niveles
 * ‚Ä¢ Logging estructurado con niveles
 * ‚Ä¢ Event delegation y optimizaci√≥n de performance
 * 
 * üöÄ SISTEMA DE RECARGA AUTOM√ÅTICA:
 * ‚Ä¢ Estrategia 1: recargarTablaUsuarios() (espec√≠fica)
 * ‚Ä¢ Estrategia 2: ajaxFiltrar() (filtros AJAX)
 * ‚Ä¢ Estrategia 3: recargarSeccionUsuarios() (secci√≥n completa)
 * ‚Ä¢ Estrategia 4: Recarga manual con fetch
 * ‚Ä¢ Fallback: Recarga completa de p√°gina
 * 
 * üîó DEPENDENCIAS:
 * ‚Ä¢ modales_copflow.js (sistema de notificaciones)
 * ‚Ä¢ usuarios.js (funciones de tabla y estad√≠sticas)
 * ‚Ä¢ API: crear_usuario.php, verificar_email.php
 * ‚Ä¢ Modal: crear_usuario_modal.php
 * 
 * üé® ESTILOS REQUERIDOS:
 * ‚Ä¢ Tailwind CSS para clases utilitarias
 * ‚Ä¢ RemixIcon para iconograf√≠a
 * ‚Ä¢ Clases personalizadas para animaciones
 * 
 * üë®‚Äçüíª DESARROLLADO POR: Diomedez98 (JCCODE-SAS)
 * üìÖ FECHA: 2025-09-10 04:13:53 UTC
 * üîó REPOSITORIO: https://github.com/Diomedez98/copflows
 * üè¢ EMPRESA: JCCODE-SAS
 * üì¶ VERSI√ìN: 2.1
 * 
 * ===============================================================
 */